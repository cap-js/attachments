const cds = require('@sap/cds')
const DEBUG = cds.debug('attachments')
const { SELECT } = cds.ql;

async function scanRequest(Attachments, key, req) {
  const scanEnabled = cds.env.requires?.attachments?.scan ?? true
  const AttachmentsSrv = await cds.connect.to("attachments")
  const log = cds.log('attachments')
  const start = Date.now()

  let draftEntity, activeEntity
  if (Attachments.isDraft) {
    draftEntity = Attachments
    activeEntity = Attachments.actives
  } else {
    activeEntity = Attachments
  }

  const currEntity = draftEntity ?? activeEntity

  if (!scanEnabled) {
    if (cds.env.profiles.some(p => p === "development" || p === "test") && !cds.env.profiles.includes("hybrid")) {
      await updateStatus(AttachmentsSrv, key, "Scanning", currEntity, draftEntity, activeEntity)
      setTimeout(() => {
        DEBUG?.('[SCAN] Scanning disabled: setting status to Clean (dev/test profile)')
        updateStatus(AttachmentsSrv, key, "Clean", currEntity, draftEntity, activeEntity)
          .catch(e => log.error('[SCAN][DevFallback]', e))
      }, 5000).unref()
    }
    return
  }

  await updateStatus(AttachmentsSrv, key, "Scanning", currEntity, draftEntity, activeEntity)

  // Read file content
  let fileContent
  try {
    const contentStream = await AttachmentsSrv.get(currEntity, key)
    fileContent = await streamToString(contentStream)
    DEBUG?.('[SCAN] File content read successfully')
  } catch (err) {
    log.error('[SCAN][ReadError]', err)
    req?.error?.(409, 'Unable to read file for malware scan.')
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
    return
  }

  // Make request to malware scanner
  const credentials = getCredentials()
  let response
  try {
    response = await fetch(`https://${credentials.uri}/scan`, {
      method: "POST",
      headers: {
        Authorization:
          "Basic " + Buffer.from(`${credentials.username}:${credentials.password}`, "binary").toString("base64"),
      },
      body: fileContent,
    })
    DEBUG?.('[SCAN] Malware scanner responded')
  } catch (err) {
    log.error('[SCAN][ScannerError]', err)
    req?.error?.(502, err)
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
    return
  }

  // Parse response
  let responseText
  try {
    responseText = await response.json()
    DEBUG?.('[SCAN] Malware scanner response parsed', responseText)
  } catch (err) {
    log.error('[SCAN][ResponseParseError]', err)
    req?.error?.(500, 'Invalid response from malware scanner.')
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
    return
  }

  // Interpret result and update
  try {
    const status = responseText.malwareDetected ? "Infected" : "Clean"
    DEBUG?.(`[SCAN] Final scan result: ${status}`)

    if (status === "Infected") {
      DEBUG?.(`[SCAN] Infected file detected, deleting content for key: ${key}`)
      await AttachmentsSrv.deleteInfectedAttachment(currEntity, key, req)
      req?.notify?.(200, 'Malware detected. Attachment was deleted.')
    } else {
      req?.notify?.(200, 'Attachment passed malware scan.')
    }

    await updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity)

    log.info('[SCAN][Complete]', {
      key,
      status,
      timeMs: Date.now() - start
    })

  } catch (err) {
    log.error('[SCAN][StatusUpdateError]', err)
    req?.error?.(500, 'Scan complete but failed to update final status.')
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
  }
}
async function updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity) {
  if (currEntity == draftEntity) {
    currEntity = await getCurrentEntity(currEntity, activeEntity, key)
  }
  await AttachmentsSrv.update(currEntity, key, { status: status })
}

async function getCurrentEntity(draftEntity, activeEntity, key) {
  const entryInDraft = await entryExists(draftEntity, key)
  return entryInDraft ? draftEntity : activeEntity
}

async function entryExists(Attachments, key) {
  try {
    const result = await SELECT.from(Attachments, key).columns('url')
    return result !== null && result !== undefined
  } catch {
    return false
  }
}


function getCredentials() {
  try {
    return cds.env.requires.malwareScanner.credentials;
  } catch {
    throw new Error("SAP Malware Scanning service is not bound.");
  }
}

function streamToString(stream) {
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)))
    stream.on('error', (err) => reject(err))
    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')))
  })
}

module.exports = {
  scanRequest
}
