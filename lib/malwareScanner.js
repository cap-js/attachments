const cds = require('@sap/cds')
const DEBUG = cds.debug('attachments')
const { SELECT } = cds.ql;


const STATUS_INFECTED = "Infected";
const STATUS_CLEAN = "Clean";
const STATUS_SCANNING = "Scanning"; 
const STATUS_FAILED = "Failed";

async function scanRequest(Attachments, key, req) {
  DEBUG?.(`[Scan] Scanning file uploaded for ${Attachments}`);
  const scanEnabled = cds.env.requires?.attachments?.scan ?? true
  const AttachmentsSrv = await cds.connect.to("attachments")

  let draftEntity, activeEntity
  if (Attachments.isDraft) {
    draftEntity = Attachments
    activeEntity = Attachments.actives
  } else {
    activeEntity = Attachments
  }
  let currEntity = draftEntity == undefined ? activeEntity : draftEntity

  DEBUG?.(`[Scan] activeEntity = ${activeEntity}`);

  if (!scanEnabled) {
    await localMockedScan(AttachmentsSrv, key, req, currEntity, draftEntity, activeEntity);
  } else {
    await remoteScan(AttachmentsSrv, key, req, currEntity, draftEntity, activeEntity);
  }
}

async function remoteScan(AttachmentsSrv, key, req, currEntity, draftEntity, activeEntity) {
  try {
    DEBUG?.(`[Scan] Executing remote scan for ${currEntity.name}`);
    await updateStatus(AttachmentsSrv, key, STATUS_SCANNING, currEntity, draftEntity, activeEntity);

    const contentStream = await AttachmentsSrv.get(currEntity, key);
    const fileContent = await streamToString(contentStream);

    const malwareScannerResponse = await sendFileToMalwareScanner(fileContent);
    
    const responseText = await malwareScannerResponse.json();

    const status = responseText.malwareDetected ? STATUS_INFECTED : STATUS_CLEAN;

    if (status === STATUS_INFECTED) {
      DEBUG?.("[Scan] Malware detected in the file, deleting attachment content from db", key);
      await AttachmentsSrv.deleteInfectedAttachment(currEntity, key, req);
    }
    DEBUG?.(`[Scan] Scanned file with status: ${status}`, key);
    await updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity);
  } catch (err) {
    DEBUG?.("[Scan] Failed to execute Malware scan", err)
    await updateStatus(AttachmentsSrv, key, STATUS_FAILED, currEntity, draftEntity, activeEntity);
  }
}

async function localMockedScan(AttachmentsSrv, key, req, currEntity, draftEntity, activeEntity) {
  DEBUG?.(`[Scan] Executing local mocked scan for ${currEntity.name}`);
  if (cds.env.profiles.some(p => p === "development" || p === "test") && !cds.env.profiles.includes("hybrid")) {
    await updateStatus(AttachmentsSrv, key, "Scanning", currEntity, draftEntity, activeEntity)
    setTimeout(() => {
      DEBUG?.('Malware scanning is disabled. Setting scan status to Clean in development profile.')
      updateStatus(AttachmentsSrv, key, "Clean", currEntity, draftEntity, activeEntity)
        .catch(e => cds.log('attachments').error(e))
    }, 5000).unref()
    return
  } else {
    return
  }
}

async function sendFileToMalwareScanner(fileContent) {
  DEBUG?.("[Scan] Sending file to Malware Scanning Service");
  const credentials = getCredentials();
  response = await fetch(`https://${credentials.uri}/scan`, {
    method: "POST",
    headers: {
      Authorization:
        "Basic " + Buffer.from(`${credentials.username}:${credentials.password}`, "binary").toString("base64"),
    },
    body: fileContent,
  });
  return response;
}

async function updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity) {
   DEBUG?.(`[Scan] Updating status for ${currEntity} - ${status}`);
  if (currEntity == draftEntity) {
    currEntity = await getCurrentEntity(currEntity, activeEntity, key)
  }
  await AttachmentsSrv.update(currEntity, key, { status: status })
}

async function getCurrentEntity(draftEntity, activeEntity, key) {
  const entryInDraft = await entryExists(draftEntity, key)
  return entryInDraft ? draftEntity : activeEntity
}

async function entryExists(Attachments, key) {
  try {
    const result = await SELECT.from(Attachments, key).columns('url')
    return result !== null && result !== undefined
  } catch {
    return false
  }
}


function getCredentials() {
  try {
    return cds.env.requires.malwareScanner.credentials;
  } catch {
    throw new Error("[Scan] SAP Malware Scanning service is not bound.");
  }
}

function streamToString(stream) {
  DEBUG?.(`[Scan] streaming to string`);
  const chunks = [];
  try {
    return new Promise((resolve, reject) => {
      stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)))
      stream.on('error', (err) => reject(err))
      stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')))
    });
  } catch (error) {
    throw new Error("[Scan] Error in streaming data from content", error)
  }

}

module.exports = {
  scanRequest
}
