const xsenv = require('@sap/xsenv')
const cds = require('@sap/cds')
const DEBUG = cds.debug('attachments')
const { SELECT } = cds.ql;

async function scanRequest(Attachments, key) {
  const scanEnabled = cds.env.requires?.attachments?.scan ?? true
  const AttachmentsSrv = await cds.connect.to("attachments")
  
  let draftEntity, activeEntity
  if (Attachments.isDraft) {
    draftEntity = Attachments
    activeEntity = Attachments.actives
  } else {
    activeEntity = Attachments
  }

  let currEntity = draftEntity == undefined ? activeEntity : draftEntity

  if (!scanEnabled) {
    DEBUG?.('Malware scanning is disabled. Setting scan status to Clean.')
    await updateStatus(AttachmentsSrv, key, "Clean", currEntity, draftEntity, activeEntity)
    return
  }
  
  const credentials = getCredentials()
  await updateStatus(AttachmentsSrv, key, "Scanning", currEntity, draftEntity, activeEntity)

  const contentStream = await AttachmentsSrv.get(currEntity, key)
  let fileContent
  try {
    fileContent = await streamToString(contentStream)
  } catch (err) {
    DEBUG?.("Malware Scanning: Cannot read file content", err)
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
    return
  }

  let response;
  try {
    response = await fetch(`https://${credentials.uri}/scan`, {
      method: "POST",
      headers: {
        Authorization:
          "Basic " + Buffer.from(`${credentials.username}:${credentials.password}`, "binary").toString("base64"),
      },
      body: fileContent,
    })
  } catch (error) {
    DEBUG?.("Request to malware scanner failed", error)
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
    return
  }

  try {
    const responseText = await response.json()
    const status = responseText.malwareDetected ? "Infected" : "Clean"
    await updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity)
  } catch (err) {
    DEBUG?.("Cannot serialize malware scanner response body", err)
    await updateStatus(AttachmentsSrv, key, "Failed", currEntity, draftEntity, activeEntity)
  }
}

async function updateStatus(AttachmentsSrv, key, status, currEntity, draftEntity, activeEntity) {
  if (currEntity == draftEntity) {
    currEntity = await getCurrentEntity(currEntity, activeEntity, key)
  }
  await AttachmentsSrv.update(currEntity, key, { status: status})
}

async function getCurrentEntity(draftEntity, activeEntity, key) {
  const entryInDraft  = await entryExists(draftEntity, key)
  return entryInDraft ? draftEntity : activeEntity
}

async function entryExists(Attachments, key) {
  try {
    const result = await SELECT.from(Attachments, key).columns('url')
    return result !== null && result !== undefined
  } catch (err) {
    return false
  }
}


function getCredentials() {
  return xsenv.serviceCredentials({ label: "malware-scanner" });
}

function streamToString(stream) {
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on('data', (chunk) => chunks.push(Buffer.from(chunk)))
    stream.on('error', (err) => reject(err))
    stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')))
  })
}

module.exports = {
  scanRequest
}