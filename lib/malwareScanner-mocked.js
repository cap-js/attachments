const cds = require('@sap/cds')
const LOG = cds.log('malware-scanner')

class MockedMalwareScanner extends cds.Service {
  init() {
    this.on('ScanFile', this.scan)
  }

  /**
   * Scans the "content" property of the given entity, specified by the CSN name (target) and 
   * the key object, for malware. 
   * Updates the status property on the given entity to reflect if the file is clean.
   * Triggers an attachments service delete event to remove the malware.
   * @param {*} target CSN Entity name, which is used to lookup entity via cds.model.definitions[<target>]
   * @param {object} key Object with keys of target
   */
  async scan(msg) {
    const { target, keys } = msg.data
    const scanEnabled = cds.env.requires?.attachments?.scan ?? true
    if (!scanEnabled) {
      LOG.warn(`Malware scanner is disabled! Please consider enabling it`)
    }

    LOG.info(`Initiating mocked malware scan request for ${target}, ${keys} `)

    const model = cds.context.model ?? cds.model
    //Make sure its the active target
    const _target = model.definitions[target].actives ?? model.definitions[target]

    if (!_target) {
      LOG.error(`Could not scan ${target}, ${keys} for malware as no CSN entity definition was found for the name!`)
      return
    }

    if (_target.drafts) {
      await Promise.all([
        UPDATE.entity(_target).where(keys).set({ status: 'Scanning' }),
        UPDATE.entity(_target.drafts).where(keys).set({ status: 'Scanning' })
      ])
    } else {
      await UPDATE.entity(_target).where(keys).set({ status: 'Scanning' })
    }

    setTimeout(async () => {
      LOG.info(`Setting scan status to Clean (development mode) for ${target}, ${keys}`)
      if (_target.drafts) {
        await Promise.all([
          UPDATE.entity(_target).where(keys).set({ status: 'Clean' }),
          UPDATE.entity(_target.drafts).where(keys).set({ status: 'Clean' })
        ])
      } else {
        await UPDATE.entity(_target).where(keys).set({ status: 'Clean' })
      }
    }, 1000).unref()
  }
}

module.exports = MockedMalwareScanner
